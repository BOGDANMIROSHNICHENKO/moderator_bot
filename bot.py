from aiogram import Bot, Dispatcher, executor, types, filters
from aiogram.dispatcher.filters import Text
import config as cfg
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
import logging

storage = MemoryStorage()
bot = Bot(token=cfg.TOKEN)
dp = Dispatcher(bot, storage=storage)
bot = Bot(token=cfg.TOKEN)


kb =  types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
kb2 = types.KeyboardButton('üßë‚Äçüíª My commands üßë‚Äçüíª:')
kb3 = types.KeyboardButton('üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª')
kb4 = types.KeyboardButton('üßë‚Äçüíª –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å üßë‚Äçüíª')
kb.add(kb2,kb3,kb4)


@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS) #greeting new users
async def new_chat_member_handler(message: types.Message):
    for member in message.new_chat_members:
        await message.reply(f"Welcome, {member.full_name} (@{member.username})!")

@dp.message_handler(content_types=types.ContentType.LEFT_CHAT_MEMBER) #farewell to departed users
async def left_chat_member_handler(message: types.Message):
    member = message.left_chat_member
    await message.reply(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {member.full_name} (@{member.username})!")
    

@dp.message_handler(commands=['start'])
async def startbot(message: types.Message):
   await message.answer(f'Hello {message.from_user.first_name},–≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', reply_markup=kb)    

@dp.message_handler(Text(equals="üßë‚Äçüíª My commands üßë‚Äçüíª:"))
async def kommenu(message: types.Message):
      await message.reply(f"{message.from_user.first_name}, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —è –ø–æ–∫–∞–∂—É —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã \n –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã: /start, \n /ban (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)")

@dp.message_handler(Text(equals="üßë‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª"))
async def kommenu2(message: types.Message):   
   await message.reply(f"{message.from_user.first_name}, <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> –ø–æ –≤–∞—à–µ–π –ø—Ä–æ—Å—å–±–µ", reply_markup=kb, parse_mode=types.ParseMode.HTML)

@dp.message_handler(Text(equals="üßë‚Äçüíª –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å üßë‚Äçüíª"))
async def kommenu3(message: types.Message):   
   await message.reply(f"{message.from_user.first_name}, <b>–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–¥–µ–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º <a href='https://t.me/Bogdan_Mirosh'>WEBBOGDAN</a></b>, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à–µ–≥–æ —Å –≤–∞–º–∏ –ª—é–±–∏–º—Ü–∞) –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –µ–≥–æ <a href='https://github.com/BOGDANMIROSHNICHENKO'><b>GITHUB</b></a>", reply_markup=kb, parse_mode=types.ParseMode.HTML)


logging.basicConfig(level=logging.INFO)


@dp.message_handler(Command("ban"))
async def ban_user(message: types.Message, state: FSMContext):
    if message.from_user.id in cfg.admins:  
        if message.reply_to_message:  
            user_id = message.reply_to_message.from_user.id  
            try:
                await bot.kick_chat_member(message.chat.id, user_id)  
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")  
            except Exception as e:
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                logging.error(f"–û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.")
    else:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.")

@dp.message_handler()
async def mess_handler(message: types.Message):     
    text = message.text.lower()
    text2 = message.text.lower().replace(' ', '')
    for word in cfg.WORDS:
        if word in text:
            await message.delete()
            await message.answer( '–†—É–≥–∞—Ç—å—Å—è –ø–ª–æ—Ö–æ') 
        if word in text2:
            await message.delete()
            await message.answer( '–†—É–≥–∞—Ç—å—Å—è –ø–ª–æ—Ö–æ')
    if message.reply_to_message:
        for respmes in cfg.RESPECT:
            if respmes in text:
                await message.reply(f'–£–≤–∞–∂–∞–Ω–∏–µ –æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{message.from_user.username}')

executor.start_polling(dp, skip_updates=True)

